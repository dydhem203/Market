<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.market.mapper.ProductMapper">
    <select id="getProductDataByProductCode" resultType="Product">
        select productCode,
               productName,
               price,
               dcPrice,
               image,
               regCnt,
               remCnt,
               dcRate,
               brand,
               sellerId,
               unit,
               amt,
               origin,
               allergy,
               expDate,
               details,
               scope,
               category1,
               category2
        from product
        where productCode = #{productCode}
    </select>
    <select id="getProductImagesByProductCode" resultType="ProductImage">
        select image, imgOrder
        from productImage
        where productCode = #{productCode}
    </select>
    <select id="getPopularProducts" resultType="Product">
        select productCode,
               productName,
               price,
               dcPrice,
               image,
               regCnt,
               remCnt,
               dcRate,
               brand,
               sellerId,
               unit,
               amt,
               origin,
               allergy,
               expDate,
               details,
               scope
        from product limit 8
    </select>
    <select id="getAllProductsCnt" resultType="_int">
        select count(productCode) as totalProducts
          from product
         where 1 = 1
           and productName like "%${searchText}%"
    </select>
    <select id="getProducts" resultType="Product">
        select P.productCode, P.productName, P.price, P.dcPrice, P.image, P.regCnt, P.remCnt, P.dcRate, P.brand, P.amt, P.scope
          from (
                select @rownum:=@rownum+1 rnum, P.*
                  from
                    (   select *
                          from product
                         where 1 = 1
                           and productName like "%${searchParam.searchText}%"
                            <choose>
                                <when test="searchParam.orderBy == 'desc'">
                                    order by ${searchParam.sort} desc
                                </when>
                                <otherwise>
                                    order by ${searchParam.sort}
                                </otherwise>
                            </choose>
                    ) P,
                    (select @rownum := 0) R
             where 1 = 1) P
        where rnum between #{startIdx} and #{startIdx} + #{searchParam.pageSize} - 1
    </select>

    <select id="getReviewDataByProductCode" resultType="com.example.market.dto.Review">
        select no, userId, productCode, regDate, contents, point
        from review
        where userId = #{userId}
          and productCode = #{productCode}
    </select>

    <insert id="addReview">
        insert into review(userId, productCode, regDate, contents, point)
        values(#{userId}, #{productCode}, now(), #{contents}, #{point})
        ON DUPLICATE KEY UPDATE
            updDate=now(),
            contents=#{contents},
            point=#{point}
    </insert>
</mapper>